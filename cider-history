;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(count '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))" "(count '(200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 199 199 199 199 199 199 187 187 101 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))" "(sort > '(1 5 3 7 2))" "(sort < '(1 5 3 7 2))" "(sort < '(1 5 3 7))" "(replace {:n 5 :p 2 :l 33} '(:a :n :p :e))" "(replace {:n 5 :p 2} '(:a :n :p :e))" "(replace {:n 5 :p 2} [:a :n :p :e])" "(/ 4 2.3)" "(/ 4 29)" "(sort '(8 -3 2 48 -3 -5 38))" "(for [[a b] {:a 1 :b 2 :c 3 :d 4}] [(inc b) a])" "(for [[a b] {:a 1 :b 2 :c 3 :d 4}])" "(map {:a 4 :b 2 :c 11} '(:b :b :b :c :c :b))" "(into {} (map #(vector % (count %)) '(\"asd\" \"bbbbbb\" \"\" \"de\")))" "(map #(vector % (count %)) '(\"asd\" \"bbbbbb\" \"\" \"de\"))" "(distinct '((a b c) (b c a) (a b c)))" "(behavioral-distance '(1.3232 :no-stack-item \"hats off\") '(8.533 :no-stack-item \"hats off\") {:novelty-distance-metric :hamming})" "(behavioral-distance '(1.3232 :no-stack-item \"hats off\") '(8.533 5 \"hats off\") {:novelty-distance-metric :hamming})" "(behavioral-distance '(1.3232 \"hats off\") '(8.533 \"hats off\") {:novelty-distance-metric :hamming})" "(behavioral-distance '(1.3232 \"hi there\") '(8.533 \"hats off\") {:novelty-distance-metric :hamming})" "(levenshtein-distance \"asdasd\" \"asdasd\")" "(= 3 3 4)" "(= 3 3 3)" "(map #(if (zero? %) 0 1) '(4 3 0 2 0 3 1 0))" "(behavioral-distance '(1.3232 \"hi there\") '(8.533 \"hats off\") {:novelty-distance-metric :euclidean})" "(behavioral-distance '(1.3232 \"hi there\") '(8.533 \"hats off\") {:novelty-distance-metric :manhattan})" "(behavioral-distance '(1 \"hi there\") '(8 \"hats off\") {:novelty-distance-metric :manhattan})" "(behavioral-distance '(8 \"hi there\") '(8 \"hats off\") {:novelty-distance-metric :euclidean})" "(behavioral-distance '(1 \"hi there\") '(8 \"hats off\") {:novelty-distance-metric :euclidean})" "(behavioral-distance '(1 2 3 4) '(8 3 4 44) {:novelty-distance-metric :euclidean})" "(behavioral-distance '(1 2 3 4) '(8 3 4 4) {:novelty-distance-metric :euclidean})" "(behavioral-distance '(1 2 3 4) '(8 3 4 4) {:novelty-distance-metric :manhattan})" "(math/sqrt 5)" "(sqrt 5)" "(recognize-literal 4.33)" "(recognize-literal 4/3)" "(recognize-literal nil)" "(recognize-literal '(3 3))" "\\" "\\ " "(recognize-literal \\d)" "(recognize-literal d)" "(recognize-literal 4)" "(boolean? true)" "(number? 4/5)" "(string? \"Asd\")" "(concat '(1 2 3) '(4 5))" "(filter #(< % 0.001) (repeatedly 1000 rand))" "(filter #(< % 0.1) (repeatedly 1000 rand))" "(parse (slurp \"/Users/helmuth/Downloads/suspects.csv\"))" "(replace-space-report (replace-space-error-function {:program '(in1 \"haha\" string_concat print_string in1 string_length) :total-error 10}) nil 2999 replace-space-error-function 14)" "(replace-space-report (replace-space-error-function {:program '(in1 \"haha\" string_concat print_string in1 string_length) :total-error 0}) nil 2999 replace-space-error-function 14)" "(replace-space-report {:program '(in1 \"haha\" string_concat print_string in1 string_length)} nil 2999 replace-space-error-function 14)" "(apply + (:errors (replace-space-error-function {:program '(in1 string_length \"whwhwhwhw\" print_string)})))" "(apply + (replace-space-error-function-OLD '(in1 string_length \"whwhwhwhw\" print_string)))" "(apply + (:errors (replace-space-error-function {:program '(in1 string_length \"whwhwhwhw\" print_string)})))" "(count (:errors (replace-space-error-function {:program '(in1 string_length \"whwhwhwhw\" print_string)})))" "(replace-space-error-function {:program '(in1 string_length \"whwhwhwhw\" print_string)})" "(last (first replace-space-train-and-test-cases))" "(first (first replace-space-train-and-test-cases))" "(first (first (replace-space-train-and-test-cases)))" "(partition 2 (range 10))" "(replace-space-error-function {:program '(in1 string_length \"whwhwhwhw\" print_string)})" "(replace-space-evaluate-program-for-behaviors {:program '(in1 string_length \"whwhwhwhw\" print_string)} '([\"abcde\" 5] [\"a b c\" 2] [\"read this now\" 2323]))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 string_length in1 print_string)} '([\"abcde\" 5] [\"a b c\" 2] [\"read this now\" 2323]))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 string_length in1 print_string)} '(\"abcde\" \"a b c\" \"read this now\"))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 string_frfrfrlength)} '(\"abcde\" \"a b c\" \"read this now\"))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 string_length)} '(\"abcde\" \"a b c\" \"read this now\"))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 print_string 5)} '(\"abcde\" \"a b c\" \"read this now\"))" "(replace-space-evaluate-program-for-behaviors {:program '(in1 print_string 5)} [\"asd\"])" "(replace-space-input 5)" "(+ 4 3 2)" "(ads)")